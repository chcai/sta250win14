<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href= 'file:///home/chcai/R/x86_64-unknown-linux-gnu-library/3.0/SVGAnnotation/CSS/RSVGPlot.css'?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="564" height="504" viewBox="0 0 564 504" version="1.1" onload="init()"><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[
function init() {
var arr = new Array();
arr[ 0 ] = '1' ;
arr[ 1 ] = '2' ;
arr[ 2 ] = '3' ;
arr[ 3 ] = '4' ;
arr[ 4 ] = '5' ;
arr[ 5 ] = '6' ;
arr[ 6 ] = '7' ;
arr[ 7 ] = '8' ;
arr[ 8 ] = '9' ;
arr[ 9 ] = '10' ;
arr[ 10 ] = '11' ;
arr[ 11 ] = '12' ;
arr[ 12 ] = '13' ;
arr[ 13 ] = '14' ;
arr[ 14 ] = '15' ;
arr[ 15 ] = '16' ;
arr[ 16 ] = '17' ;
arr[ 17 ] = '18' ;
arr[ 18 ] = '19' ;
arr[ 19 ] = '20' ;
arr[ 20 ] = '21' ;
arr[ 21 ] = '22' ;
arr[ 22 ] = '23' ;
arr[ 23 ] = '24' ;
arr[ 24 ] = '25' ;
arr[ 25 ] = '26' ;
arr[ 26 ] = '27' ;
arr[ 27 ] = '28' ;
arr[ 28 ] = '29' ;
arr[ 29 ] = '30' ;
arr[ 30 ] = '31' ;
arr[ 31 ] = '32' ;
arr[ 32 ] = '33' ;
arr[ 33 ] = '34' ;
arr[ 34 ] = '35' ;
arr[ 35 ] = '36' ;
arr[ 36 ] = '37' ;
arr[ 37 ] = '38' ;
arr[ 38 ] = '39' ;
arr[ 39 ] = '40' ;
arr[ 40 ] = '41' ;
arr[ 41 ] = '42' ;
arr[ 42 ] = '43' ;
arr[ 43 ] = '44' ;
arr[ 44 ] = '45' ;
arr[ 45 ] = '46' ;
arr[ 46 ] = '47' ;
arr[ 47 ] = '48' ;
arr[ 48 ] = '49' ;
arr[ 49 ] = '50' ;
arr[ 50 ] = '51' ;
arr[ 51 ] = '52' ;
arr[ 52 ] = '53' ;
arr[ 53 ] = '54' ;
arr[ 54 ] = '55' ;
arr[ 55 ] = '56' ;
arr[ 56 ] = '57' ;
arr[ 57 ] = '58' ;
arr[ 58 ] = '59' ;
arr[ 59 ] = '60' ;
arr[ 60 ] = '61' ;
arr[ 61 ] = '62' ;
arr[ 62 ] = '63' ;
arr[ 63 ] = '64' ;
arr[ 64 ] = '65' ;
arr[ 65 ] = '66' ;
arr[ 66 ] = '67' ;
arr[ 67 ] = '68' ;
arr[ 68 ] = '69' ;
arr[ 69 ] = '70' ;
arr[ 70 ] = '71' ;
arr[ 71 ] = '72' ;
arr[ 72 ] = '73' ;
arr[ 73 ] = '74' ;
arr[ 74 ] = '75' ;
arr[ 75 ] = '76' ;
arr[ 76 ] = '77' ;
arr[ 77 ] = '78' ;
arr[ 78 ] = '79' ;
arr[ 79 ] = '80' ;
arr[ 80 ] = '81' ;
arr[ 81 ] = '82' ;
arr[ 82 ] = '83' ;
arr[ 83 ] = '84' ;
arr[ 84 ] = '85' ;
arr[ 85 ] = '86' ;
arr[ 86 ] = '87' ;
arr[ 87 ] = '88' ;
arr[ 88 ] = '89' ;
arr[ 89 ] = '90' ;
arr[ 90 ] = '91' ;
arr[ 91 ] = '92' ;
arr[ 92 ] = '93' ;
arr[ 93 ] = '94' ;
arr[ 94 ] = '95' ;
arr[ 95 ] = '96' ;
arr[ 96 ] = '97' ;
arr[ 97 ] = '98' ;
arr[ 98 ] = '99' ;
arr[ 99 ] = '100' ;
arr[ 100 ] = '101' ;
arr[ 101 ] = '102' ;
arr[ 102 ] = '103' ;
arr[ 103 ] = '104' ;
arr[ 104 ] = '105' ;
arr[ 105 ] = '106' ;
arr[ 106 ] = '107' ;
arr[ 107 ] = '108' ;
arr[ 108 ] = '109' ;
arr[ 109 ] = '110' ;
arr[ 110 ] = '111' ;
arr[ 111 ] = '112' ;
arr[ 112 ] = '113' ;
arr[ 113 ] = '114' ;
arr[ 114 ] = '115' ;
arr[ 115 ] = '116' ;
arr[ 116 ] = '117' ;
arr[ 117 ] = '118' ;
arr[ 118 ] = '119' ;
arr[ 119 ] = '120' ;
arr[ 120 ] = '121' ;
arr[ 121 ] = '122' ;
arr[ 122 ] = '123' ;
arr[ 123 ] = '124' ;
arr[ 124 ] = '125' ;
arr[ 125 ] = '126' ;
arr[ 126 ] = '127' ;
arr[ 127 ] = '128' ;
arr[ 128 ] = '129' ;
arr[ 129 ] = '130' ;
arr[ 130 ] = '131' ;
arr[ 131 ] = '132' ;
arr[ 132 ] = '133' ;
arr[ 133 ] = '134' ;
arr[ 134 ] = '135' ;
arr[ 135 ] = '136' ;
arr[ 136 ] = '137' ;
arr[ 137 ] = '138' ;
arr[ 138 ] = '139' ;
arr[ 139 ] = '140' ;
arr[ 140 ] = '141' ;
arr[ 141 ] = '142' ;
arr[ 142 ] = '143' ;
arr[ 143 ] = '144' ;
arr[ 144 ] = '145' ;
arr[ 145 ] = '146' ;
arr[ 146 ] = '147' ;
arr[ 147 ] = '148' ;
arr[ 148 ] = '149' ;
arr[ 149 ] = '150' ;
arr[ 150 ] = '151' ;
arr[ 151 ] = '152' ;
arr[ 152 ] = '153' ;
arr[ 153 ] = '154' ;
arr[ 154 ] = '155' ;
arr[ 155 ] = '156' ;
arr[ 156 ] = '157' ;
arr[ 157 ] = '158' ;
arr[ 158 ] = '159' ;
arr[ 159 ] = '160' ;
arr[ 160 ] = '161' ;
arr[ 161 ] = '162' ;
arr[ 162 ] = '163' ;
arr[ 163 ] = '164' ;
arr[ 164 ] = '165' ;
arr[ 165 ] = '166' ;
arr[ 166 ] = '167' ;
arr[ 167 ] = '168' ;
arr[ 168 ] = '169' ;
arr[ 169 ] = '170' ;
arr[ 170 ] = '171' ;
arr[ 171 ] = '172' ;
arr[ 172 ] = '173' ;
arr[ 173 ] = '174' ;
arr[ 174 ] = '175' ;
arr[ 175 ] = '176' ;
arr[ 176 ] = '177' ;
arr[ 177 ] = '178' ;
arr[ 178 ] = '179' ;
arr[ 179 ] = '180' ;
arr[ 180 ] = '181' ;
arr[ 181 ] = '182' ;
arr[ 182 ] = '183' ;
arr[ 183 ] = '184' ;
arr[ 184 ] = '185' ;
arr[ 185 ] = '186' ;
arr[ 186 ] = '187' ;
arr[ 187 ] = '188' ;
arr[ 188 ] = '189' ;
arr[ 189 ] = '190' ;
arr[ 190 ] = '191' ;
arr[ 191 ] = '192' ;
arr[ 192 ] = '193' ;
arr[ 193 ] = '194' ;
arr[ 194 ] = '195' ;
arr[ 195 ] = '196' ;
arr[ 196 ] = '197' ;
arr[ 197 ] = '198' ;
arr[ 198 ] = '199' ;
createRadioBoxList( 199 , 504 , arr, toggle , 'series' , 1 );
}]]></script><defs><clipPath id="clip1"><path d="M 30.238281 134.835938 L 474.757813 134.835938 L 474.757813 370.167969 L 30.238281 370.167969 Z M 30.238281 134.835938 "/></clipPath><symbol id="checkBoxRect" overflow="visible"><rect x="-5" y="-5" width="10" height="10" fill="white" stroke="dimgray" stroke-width="1" cursor="pointer"/></symbol><symbol id="checkBoxCross" overflow="visible"><g pointer-events="none" stroke="dimgray" stroke-width="1"><line x1="-3" y1="-3" x2="3" y2="3"/><line x1="3" y1="-3" x2="-3" y2="3"/></g></symbol></defs><g id="surface1"><rect x="0" y="0" width="504" height="504" style="fill:rgb(100%,100%,100%);fill-opacity:1;stroke:none;"/><g clip-path="url(#clip1)" clip-rule="nonzero" type="plot-region" class="plot-region" id="series1"><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 308.40625 316.804688 L 310.402344 317.019531 L 311.441406 313.222656 L 311.917969 314.851563 L 312.875 317.996094 L 315.429688 317.019531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 308.40625 316.804688 L 308.105469 298.847656 L 308.796875 292.445313 L 309.101563 289.625 L 310.097656 278.449219 L 309.925781 273.402344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 309.925781 273.402344 L 317.382813 273.347656 L 329.4375 273.566406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 329.4375 273.566406 L 333.683594 296.511719 L 334.421875 299.605469 L 334.292969 299.875 L 333.597656 300.636719 L 333.425781 306.710938 L 333.945313 311.269531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 315.429688 317.019531 L 315.429688 313.980469 L 315.214844 313.875 L 314.78125 313.386719 L 314.347656 311.160156 L 333.945313 311.269531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 109.789063 273.183594 L 109.441406 267.054688 L 109.050781 264.289063 L 109.050781 263.746094 L 109.746094 262.550781 L 112.605469 263.636719 L 113.558594 263.527344 L 114.296875 254.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 152.148438 254.46875 L 135.414063 254.46875 L 134.890625 254.414063 L 114.296875 254.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 152.148438 254.46875 L 152.019531 284.957031 L 152.019531 307.90625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 109.050781 294.832031 L 108.488281 296.894531 L 127.261719 304.21875 L 134.371094 307.039063 L 147.726563 307.960938 L 150.675781 307.90625 L 152.019531 307.90625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 109.789063 273.183594 L 112.433594 278.828125 L 113.171875 280.507813 L 110.527344 283.546875 L 110.65625 285.390625 L 109.789063 287.722656 L 109.226563 291.035156 L 110.527344 291.902344 L 111.003906 293.476563 L 109.050781 294.832031 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 265.570313 291.957031 L 265.050781 286.695313 L 264.226563 286.640625 L 264.140625 286.855469 L 263.964844 286.746094 L 262.1875 285.988281 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 262.1875 285.988281 L 262.492188 273.511719 L 262.621094 269.605469 L 261.234375 259.078125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 298.347656 263.855469 L 296.484375 263.855469 L 293.96875 263.90625 L 293.363281 263.855469 L 295.703125 260.21875 L 294.535156 259.078125 L 291.886719 259.078125 L 287.554688 259.132813 L 261.234375 259.078125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 298.347656 263.855469 L 298.433594 264.777344 L 296.875 267.054688 L 295.703125 269.441406 L 295.183594 269.226563 L 295.703125 271.285156 L 294.101563 273.402344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 287.207031 292.335938 L 287.8125 289.949219 L 287.941406 288.539063 L 287.292969 288.59375 L 287.25 287.777344 L 287.25 285.445313 L 287.597656 285.28125 L 288.246094 283.222656 L 288.117188 283.003906 L 288.59375 283.003906 L 288.808594 281.378906 L 289.675781 281.378906 L 289.460938 280.890625 L 291.109375 279.207031 L 292.582031 276.058594 L 294.101563 273.402344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 265.570313 291.957031 L 275.585938 292.171875 L 287.207031 292.335938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 109.789063 273.183594 L 70.203125 236.347656 L 69.25 235.589844 L 69.164063 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 109.050781 294.832031 L 91.058594 296.132813 L 91.144531 295.699219 L 89.972656 293.691406 L 88.628906 289.351563 L 82.558594 284.957031 L 81.5625 285.066406 L 80.304688 282.460938 L 78.832031 282.460938 L 71.722656 278.882813 L 65.433594 277.578125 L 64.785156 276.332031 L 64.261719 271.613281 L 62.960938 270.09375 L 60.015625 266.890625 L 54.898438 259.515625 L 55.203125 257.886719 L 55.59375 255.28125 L 51.515625 252.625 L 50.433594 246.980469 L 50.953125 246.710938 L 51.34375 247.632813 L 54.03125 250.074219 L 51.558594 245.625 L 52.425781 244.378906 L 50.867188 243.617188 L 50.996094 246.058594 L 47.09375 244.433594 L 46.789063 242.859375 L 41.628906 236.566406 L 40.980469 233.960938 L 40.761719 229.1875 L 36.644531 223.546875 L 36.429688 220.128906 L 38.507813 213.292969 L 37.773438 209.332031 L 37.554688 207.054688 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 69.164063 207 L 44.710938 207 L 37.554688 207.054688 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 205.042969 254.414063 L 205.042969 238.410156 L 205 225.933594 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 205.042969 254.414063 L 201.75 254.578125 L 197.804688 254.414063 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 197.804688 254.414063 L 177.253906 254.578125 L 175.085938 254.578125 L 152.148438 254.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 152.0625 216.601563 L 152.019531 232.0625 L 152.148438 254.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.824219 216.492188 L 172.65625 216.492188 L 152.0625 216.601563 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.824219 216.492188 L 204.957031 216.546875 L 204.957031 218.933594 L 205 225.933594 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 421.09375 206.617188 L 426.773438 206.726563 L 434.058594 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 433.625 213.292969 L 434.058594 212.476563 L 434.058594 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 433.625 213.292969 L 426.511719 214.105469 L 425.082031 214.105469 L 419.792969 216.328125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 421.09375 206.617188 L 420.617188 213.671875 L 421.09375 214.484375 L 419.402344 215.515625 L 419.792969 216.328125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 406.613281 227.886719 L 404.878906 227.613281 L 403.664063 228.589844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 406.613281 227.886719 L 406.394531 228.046875 L 405.789063 229.078125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 409.300781 240.632813 L 408.476563 239.605469 L 409.082031 238.898438 L 408.5625 237.488281 L 408.347656 237.433594 L 405.789063 232.007813 L 405.789063 229.078125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 409.300781 240.632813 L 404.488281 240.582031 L 404.183594 237.109375 L 403.664063 228.589844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 394.210938 237.324219 L 395.121094 236.511719 L 394.472656 235.75 L 393.5625 236.023438 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 394.210938 237.324219 L 394.125 236.78125 L 394.039063 236.566406 L 393.5625 236.023438 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 360.132813 313.929688 L 356.578125 313.222656 L 356.101563 317.34375 L 355.839844 317.292969 L 355.148438 316.042969 L 335.074219 313.929688 L 333.945313 311.269531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 360.132813 313.929688 L 360.914063 315.828125 L 364.859375 329.660156 L 365.507813 332.210938 L 371.578125 352.121094 L 370.320313 360.910156 L 368.328125 365.847656 L 367.375 365.847656 L 363.339844 366.550781 L 363.558594 365.195313 L 364.859375 365.414063 L 362.429688 362.484375 L 359.699219 359.390625 L 358.398438 358.578125 L 357.011719 353.964844 L 356.058594 349.734375 L 354.929688 349.515625 L 354.972656 350.765625 L 351.808594 344.089844 L 353.671875 340.183594 L 352.675781 340.621094 L 351.417969 339.859375 L 351.503906 342.191406 L 350.8125 341.054688 L 350.679688 341.054688 L 350.898438 337.636719 L 351.546875 331.503906 L 351.15625 329.660156 L 349.378906 328.414063 L 344.222656 321.6875 L 340.449219 319.839844 L 338.539063 320.980469 L 331.648438 323.476563 L 330.648438 322.175781 L 330.996094 323.097656 L 331.605469 322.609375 L 328.871094 319.625 L 330.128906 320.003906 L 328.742188 318.539063 L 327.832031 317.832031 L 328.351563 318.757813 L 322.628906 316.476563 L 324.925781 316.585938 L 325.011719 315.988281 L 318.335938 316.910156 L 318.769531 316.476563 L 318.554688 315.390625 L 317.511719 315.5 L 315.605469 317.5625 L 315.429688 317.019531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 360.132813 313.929688 L 360.785156 310.945313 L 360.738281 310.023438 L 361.261719 308.015625 L 361.867188 307.90625 L 362.734375 306.167969 L 363.296875 304.707031 L 364.035156 302.859375 L 365.164063 301.394531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 339.191406 273.402344 L 335.375 273.511719 L 334.117188 273.566406 L 329.4375 273.566406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 348.382813 273.457031 L 344.785156 273.457031 L 342.007813 273.566406 L 339.191406 273.402344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 348.382813 273.457031 L 346.5625 276.441406 L 350.550781 279.53125 L 354.453125 284.847656 L 356.882813 287.617188 L 357.316406 287.941406 L 357.269531 288.210938 L 359.570313 291.46875 L 361.214844 294.777344 L 362.820313 297.21875 L 363.125 300.039063 L 365.164063 301.394531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 92.445313 169.238281 L 95.957031 172.875 L 92.53125 180.414063 L 90.234375 184.753906 L 92.273438 186.058594 L 92.273438 188.554688 L 91.707031 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 92.445313 169.238281 L 91.707031 165.171875 L 91.707031 164.140625 L 91.75 140.867188 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 99.164063 140.867188 L 97.863281 140.867188 L 95.175781 140.921875 L 91.75 140.867188 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 99.164063 140.867188 L 99.253906 150.6875 L 101.679688 154.375 L 101.464844 155.730469 L 107.578125 160.613281 L 108.921875 162.675781 L 112.171875 163.21875 L 110.828125 168.859375 L 111.78125 170.378906 L 110.699219 171.734375 L 111.089844 173.417969 L 112.085938 174.339844 L 112.605469 174.175781 L 115.121094 172.0625 L 118.851563 179.003906 L 119.457031 180.46875 L 120.453125 180.359375 L 122.96875 184.265625 L 124.3125 183.34375 L 126.351563 183.617188 L 127.175781 183.074219 L 131.207031 183.183594 L 132.335938 182.910156 L 133.679688 182.964844 L 134.023438 181.285156 L 136.886719 183.507813 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 136.929688 207.105469 L 136.929688 194.847656 L 136.84375 192.839844 L 136.886719 183.507813 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 136.929688 207.105469 L 128.910156 207.054688 L 114.253906 207.054688 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 114.253906 207.054688 L 112.304688 207 L 91.707031 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 312.875 202.332031 L 305.503906 202.332031 L 304.246094 202.386719 L 300.949219 202.332031 L 291.367188 202.277344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 312.875 202.332031 L 313.089844 205.589844 L 313.308594 205.914063 L 314.910156 209.546875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 314.910156 209.546875 L 314.304688 233.691406 L 314.78125 238.464844 L 314.175781 238.953125 L 314.132813 239.332031 L 311.441406 243.074219 L 311.097656 245.460938 L 311.183594 246.925781 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 302.46875 254.414063 L 303.984375 252.136719 L 307.929688 253.167969 L 307.539063 252.027344 L 307.671875 251.269531 L 310.488281 249.855469 L 310.402344 248.878906 L 311.183594 246.925781 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 285.515625 222.460938 L 285.125 225.933594 L 287.421875 230.109375 L 290.933594 234.449219 L 291.933594 236.726563 L 294.402344 236.238281 L 294.878906 237.652344 L 294.707031 239.441406 L 293.363281 242.640625 L 299.648438 247.902344 L 300.214844 251.269531 L 301.816406 254.195313 L 302.46875 254.414063 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 291.367188 202.277344 L 295.183594 207 L 292.753906 211.445313 L 289.589844 212.316406 L 289.199219 212.476563 L 288.160156 213.292969 L 288.984375 215.460938 L 287.898438 218.878906 L 285.992188 220.234375 L 285.515625 222.460938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 314.910156 209.546875 L 316.601563 210.578125 L 317.253906 210.578125 L 320.289063 209.277344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 335.59375 209.820313 L 329.046875 209.222656 L 320.289063 209.277344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 335.417969 234.394531 L 335.460938 222.675781 L 335.507813 220.667969 L 335.59375 209.820313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 311.183594 246.925781 L 312.917969 246.003906 L 314.390625 245.898438 L 317.859375 246.601563 L 320.503906 245.136719 L 321.933594 246.167969 L 323.582031 243.835938 L 324.015625 243.671875 L 325.402344 244.8125 L 327.136719 243.996094 L 330.171875 240.582031 L 330.605469 238.84375 L 334.074219 237.597656 L 334.769531 237.597656 L 335.417969 236.511719 L 335.417969 234.394531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 291.367188 202.277344 L 287.988281 198.808594 L 287.683594 198.371094 L 287.507813 197.667969 L 288.117188 195.335938 L 286.945313 192.894531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 285.515625 222.460938 L 283.347656 220.183594 L 279.792969 220.183594 L 275.890625 220.289063 L 272.769531 220.289063 L 252.695313 220.234375 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 247.535156 202.605469 L 249.917969 209.765625 L 250.179688 211.339844 L 251.21875 212.207031 L 251.914063 217.957031 L 252.695313 220.234375 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 247.535156 202.605469 L 246.320313 199.730469 L 247.492188 196.855469 L 247.273438 195.550781 L 246.40625 192.894531 L 247.578125 192.949219 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 247.578125 192.949219 L 266.132813 192.785156 L 268.648438 192.785156 L 286.945313 192.894531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 205.042969 254.414063 L 234.832031 254.46875 L 261.148438 254.195313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 255.859375 225.824219 L 233.574219 225.988281 L 231.796875 225.988281 L 205 225.933594 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 261.148438 254.195313 L 261.105469 233.90625 L 259.199219 232.332031 L 258.71875 231.464844 L 258.503906 231.085938 L 257.898438 230.707031 L 259.199219 227.941406 L 258.199219 226.910156 L 255.859375 225.824219 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 352.457031 240.90625 L 352.589844 244.269531 L 353.371094 245.898438 L 353.757813 246.710938 L 357.011719 249.316406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 357.011719 249.316406 L 350.289063 254.632813 L 350.335938 255.011719 L 344.308594 258.210938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 300.734375 259.132813 L 311.050781 258.589844 L 310.878906 257.507813 L 318.421875 257.832031 L 320.722656 257.832031 L 340.015625 258.375 L 344.308594 258.210938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 302.46875 254.414063 L 303.117188 255.445313 L 302.988281 256.855469 L 302.945313 256.855469 L 302.554688 257.722656 L 301.558594 258.050781 L 300.734375 259.132813 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 352.457031 240.90625 L 349.769531 237.757813 L 346.777344 238.898438 L 342.875 238.140625 L 342.617188 237.757813 L 340.96875 237.433594 L 339.277344 235.261719 L 335.417969 234.394531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 299.648438 318.972656 L 297.699219 313.332031 L 298.089844 311.214844 L 294.1875 311.214844 L 284.039063 311.269531 L 284.386719 308.71875 L 285.386719 305.519531 L 286.164063 303.78125 L 286.945313 303.242188 L 288.636719 300.527344 L 287.378906 300.363281 L 289.027344 299.171875 L 287.769531 297 L 288.464844 297.21875 L 287.898438 295.863281 L 287.683594 292.824219 L 287.207031 292.335938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 299.648438 318.972656 L 294.1875 317.183594 L 293.234375 319.734375 L 296.875 319.460938 L 298.609375 319.734375 L 297.570313 321.089844 L 299.257813 321.523438 L 300.34375 320.003906 L 302.121094 319.785156 L 302.207031 321.632813 L 299.214844 324.996094 L 302.121094 327.273438 L 303.507813 328.957031 L 302.207031 329.824219 L 301.6875 329.28125 L 300.949219 329.824219 L 301.253906 329.117188 L 296.484375 325.644531 L 295.703125 327.4375 L 294.878906 329.0625 L 293.882813 328.03125 L 293.1875 327.871094 L 292.453125 327.273438 L 291.066406 328.847656 L 287.683594 327.707031 L 285.167969 324.832031 L 283.824219 323.367188 L 282.003906 322.609375 L 280.050781 323.152344 L 280.140625 324.019531 L 279.226563 324.667969 L 273.679688 323.097656 L 267.132813 323.203125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 265.570313 291.957031 L 265.875 301.882813 L 267.261719 305.300781 L 269.386719 310.617188 L 269.472656 310.78125 L 268.214844 314.523438 L 268.390625 318.375 L 266.65625 322.121094 L 267.132813 323.203125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 441.992188 196.800781 L 440.515625 194.414063 L 439.433594 175.695313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 441.992188 196.800781 L 445.675781 191.644531 L 447.714844 189.582031 L 448.972656 190.558594 L 449.839844 189.257813 L 451.617188 188.933594 L 452.355469 188.390625 L 454.390625 187.632813 L 455.5625 183.886719 L 456.820313 183.183594 L 456.863281 183.996094 L 456.992188 184.429688 L 456.472656 185.136719 L 458.25 185.191406 L 459.289063 184.160156 L 461.890625 183.886719 L 462.324219 184.429688 L 463.0625 183.886719 L 464.191406 182.800781 L 466.445313 182.261719 L 467.355469 181.554688 L 467.960938 181.609375 L 469.957031 180.847656 L 469.21875 180.035156 L 469.351563 179.332031 L 469.652344 177.8125 L 467.398438 177.105469 L 467.136719 173.742188 L 464.535156 172.277344 L 464.40625 159.636719 L 461.503906 156.546875 L 456.125 157.792969 L 454.652344 156.597656 L 454.042969 155.40625 L 451.617188 157.414063 L 446.023438 165.984375 L 445.546875 169.566406 L 442.339844 173.308594 L 442.726563 174.71875 L 441.816406 174.71875 L 441.339844 175.53125 L 439.433594 175.695313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 389.183594 232.386719 L 387.578125 229.839844 L 384.371094 229.457031 L 383.675781 230.054688 L 381.421875 230.054688 L 376 233.308594 L 375.699219 228.644531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 375.699219 228.644531 L 391.046875 228.589844 L 403.664063 228.589844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 409.300781 240.632813 L 409.082031 241.828125 L 409.039063 241.992188 L 408.085938 244.703125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 407.652344 244.59375 L 408.085938 244.703125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 407.652344 244.59375 L 408.042969 242.695313 L 407.003906 244.703125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 407.003906 244.703125 L 405.050781 244.972656 L 404.878906 245.300781 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 394.039063 241.339844 L 394.773438 241.339844 L 395.511719 241.773438 L 398.503906 243.457031 L 399.5 243.890625 L 398.503906 242.152344 L 397.765625 240.90625 L 398.980469 241.175781 L 398.070313 237.433594 L 398.546875 235.15625 L 398.070313 233.582031 L 397.941406 232.984375 L 399.15625 232.875 L 401.105469 230.816406 L 401.148438 230.707031 L 401.320313 230.597656 L 402.277344 230.597656 L 402.753906 230.542969 L 402.015625 231.792969 L 401.367188 232.0625 L 400.367188 234.394531 L 400.976563 234.339844 L 400.886719 236.890625 L 399.761719 237.597656 L 400.757813 238.410156 L 401.539063 239.117188 L 400.367188 239.65625 L 400.195313 240.363281 L 401.019531 242.152344 L 402.101563 242.097656 L 402.96875 241.992188 L 402.578125 243.617188 L 403.488281 243.507813 L 403.144531 244.324219 L 403.835938 244.269531 L 402.96875 245.300781 L 404.226563 245.246094 L 404.878906 245.300781 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 394.210938 237.324219 L 392.476563 239.820313 L 392.21875 241.449219 L 394.039063 241.339844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 389.183594 232.386719 L 390.785156 233.636719 L 390.570313 233.851563 L 390.484375 234.015625 L 393.5625 236.023438 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 444.160156 212.75 L 443.550781 212.859375 L 442.292969 212.476563 L 441.6875 213.292969 L 441.472656 213.238281 L 444.160156 212.75 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 421.09375 206.617188 L 422.003906 202.765625 L 422.742188 200.054688 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 422.742188 200.054688 L 424.648438 200.109375 L 425.429688 200.109375 L 428.855469 200.164063 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 428.855469 200.164063 L 438.523438 200.109375 L 439.691406 198.96875 L 441.210938 198.96875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 441.210938 198.96875 L 441.816406 201.789063 L 439.691406 204.230469 L 442.683594 206.183594 L 442.683594 207.59375 L 445.027344 209.710938 L 447.410156 208.519531 L 447.367188 207.921875 L 447.195313 207.8125 L 446.761719 206.890625 L 447.324219 207 L 447.585938 210.46875 L 442.554688 211.394531 L 442.640625 210.035156 L 441.949219 209.765625 L 439.171875 211.445313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 439.171875 211.445313 L 438.003906 209.386719 L 437.570313 209.222656 L 437.4375 209.007813 L 437.09375 207.214844 L 434.058594 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 447.109375 213.941406 L 447.628906 213.292969 L 447.800781 213.835938 L 447.929688 213.941406 L 445.980469 213.941406 L 447.109375 213.941406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 314.433594 177.757813 L 319.074219 170.8125 L 319.59375 171.898438 L 321.371094 170.648438 L 322.410156 170.488281 L 321.066406 172.441406 L 323.972656 170.976563 L 325.707031 169.511719 L 329.828125 168.75 L 335.375 169.945313 L 336.285156 169.890625 L 337.585938 169.023438 L 341.878906 169.023438 L 340.101563 166.960938 L 338.886719 164.898438 L 337.152344 165.171875 L 333.859375 164.085938 L 334.117188 161.96875 L 331.386719 162.457031 L 330.738281 162.730469 L 327.484375 162.730469 L 321.980469 164.898438 L 316.992188 164.519531 L 314.433594 161.699219 L 309.578125 161.046875 L 308.105469 161.863281 L 308.710938 159.3125 L 312.960938 156.058594 L 312.613281 155.1875 L 307.714844 156.980469 L 300.214844 161.15625 L 293.101563 163.921875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 314.433594 177.757813 L 313.351563 176.402344 L 313.308594 175.261719 L 312.398438 175.371094 L 312.613281 171.84375 L 310.53125 170.488281 L 310.359375 169.890625 L 297.089844 166.527344 L 293.101563 163.921875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 335.59375 209.820313 L 338.84375 209.710938 L 342.488281 209.546875 L 345.824219 209.441406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 345.824219 209.441406 L 348.121094 205.046875 L 350.722656 201.300781 L 351.679688 201.195313 L 352.804688 200 L 352.980469 195.824219 L 351.070313 188.066406 L 348.644531 187.957031 L 343.570313 191.644531 L 342.097656 189.855469 L 343.527344 188.066406 L 345.042969 186.058594 L 346.734375 183.617188 L 346.433594 179.925781 L 346 178.027344 L 346.820313 177.8125 L 345.261719 175.261719 L 340.839844 173.796875 L 340.578125 173.199219 L 334.984375 171.574219 L 333.554688 172.875 L 334.207031 174.71875 L 331.820313 175.804688 L 330.433594 180.742188 L 330.433594 179.222656 L 329.78125 180.199219 L 329.652344 177.59375 L 327.136719 178.949219 L 324.882813 182.476563 L 323.148438 187.304688 L 323.191406 188.660156 L 322.714844 191.15625 L 324.882813 197.992188 L 324.492188 203.148438 L 320.289063 209.277344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 247.578125 192.949219 L 247.359375 175.316406 L 245.625 174.449219 L 244.671875 173.144531 L 246.582031 169.78125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 246.582031 169.78125 L 245.714844 165.441406 L 244.414063 154.484375 L 244.414063 154.210938 L 243.113281 151.390625 L 242.070313 144.773438 L 241.550781 140.8125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 279.878906 162.1875 L 293.535156 152.746094 L 299.5625 150.144531 L 297.828125 150.144531 L 290.066406 148.460938 L 288.550781 148.40625 L 284.386719 149.273438 L 281.265625 147.917969 L 280.441406 146.832031 L 278.96875 147.863281 L 277.667969 147.050781 L 276.324219 145.964844 L 276.453125 145.476563 L 274.113281 144.394531 L 267.695313 145.476563 L 267.566406 144.609375 L 261.363281 143.308594 L 259.933594 137.992188 L 257.59375 137.285156 L 257.203125 140.757813 L 241.550781 140.8125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 279.878906 162.1875 L 278.792969 163 L 278.359375 168.96875 L 275.152344 171.246094 L 274.199219 173.144531 L 275.890625 174.828125 L 275.109375 178.246094 L 275.066406 180.308594 L 275.023438 181.011719 L 280.355469 184.105469 L 285.949219 188.824219 L 286.945313 192.894531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 308.40625 316.804688 L 307.0625 316.964844 L 305.460938 317.128906 L 304.503906 316.476563 L 304.679688 316.695313 L 301.644531 317.617188 L 299.648438 318.972656 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 294.101563 273.402344 L 303.636719 273.457031 L 305.113281 273.402344 L 309.925781 273.402344 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 298.347656 263.855469 L 299.171875 262.117188 L 299.171875 261.46875 L 299.347656 260.597656 L 299.519531 260.4375 L 299.910156 259.132813 L 300.167969 259.40625 L 300.734375 259.132813 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 261.148438 254.195313 L 261.191406 256.476563 L 261.234375 259.078125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 252.695313 220.234375 L 254.125 223.109375 L 255.859375 225.824219 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.914063 140.8125 L 189.914063 169.78125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.914063 169.78125 L 189.957031 170.378906 L 189.914063 176.671875 L 189.867188 178.625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.867188 178.625 L 175.820313 178.625 L 174.996094 178.679688 L 169.925781 178.625 L 167.367188 178.625 L 136.972656 178.734375 L 136.886719 183.507813 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.914063 140.8125 L 168.582031 140.8125 L 167.148438 140.867188 L 99.164063 140.867188 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 247.535156 202.605469 L 240.207031 199.023438 L 239.945313 199.132813 L 239.644531 199.132813 L 236.476563 199.566406 L 232.707031 198.371094 L 189.824219 197.558594 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.824219 216.492188 L 189.824219 197.558594 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 91.707031 207 L 69.164063 207 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 114.253906 207.054688 L 114.296875 230.382813 L 114.253906 238.628906 L 114.296875 254.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 428.855469 200.164063 L 428.636719 197.9375 L 430.632813 190.558594 L 431.671875 188.28125 L 432.0625 186.601563 L 433.449219 184.972656 L 435.703125 182.097656 L 436.179688 178.570313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 439.433594 175.695313 L 437.222656 176.183594 L 436.179688 178.570313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 441.210938 198.96875 L 442.035156 197.394531 L 441.992188 196.800781 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 411.816406 213.074219 L 415.847656 215.351563 L 418.058594 216.601563 L 417.929688 217.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 417.929688 217.46875 L 417.191406 218.390625 L 416.582031 219.746094 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 415.195313 221.429688 L 415.542969 220.507813 L 415.628906 220.234375 L 416.582031 219.746094 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 415.195313 221.429688 L 417.625 222.296875 L 416.757813 225.824219 L 414.71875 230.488281 L 414.113281 231.738281 L 410.339844 236.1875 L 410.558594 234.667969 L 406.742188 232.0625 L 405.789063 229.078125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 411.816406 213.074219 L 409.039063 217.253906 L 408.648438 220.5625 L 409.214844 220.777344 L 409.214844 221.484375 L 411.726563 224.46875 L 406.613281 227.886719 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 197.804688 254.414063 L 197.847656 259.351563 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 197.847656 259.351563 L 197.28125 301.828125 L 170.402344 301.828125 L 171.007813 303.835938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 171.007813 303.835938 L 158.347656 303.78125 L 158.304688 304.867188 L 158.261719 307.90625 L 152.019531 307.90625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 417.839844 218.390625 L 417.105469 219.207031 L 417.148438 219.3125 L 417.839844 218.390625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 422.132813 178.570313 L 411.683594 178.734375 L 410.515625 178.734375 L 403.75 183.453125 L 399.71875 187.632813 L 400.195313 187.847656 L 400.933594 189.042969 L 400.023438 189.910156 L 400.023438 192.785156 L 398.765625 192.675781 L 397.332031 193.761719 L 397.160156 193.925781 L 396.8125 194.519531 L 389.398438 194.847656 L 379.6875 194.847656 L 379.339844 196.203125 L 380.554688 199.402344 L 373.660156 204.613281 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 422.132813 178.570313 L 421.875 186.328125 L 422.089844 190.289063 L 422.046875 190.558594 L 421.65625 192.132813 L 422.4375 191.753906 L 422.742188 200.054688 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 419.792969 216.328125 L 418.621094 217.792969 L 418.664063 218.230469 L 417.929688 217.46875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 411.816406 213.074219 L 409.214844 210.796875 L 408.390625 208.464844 L 408 208.410156 L 407.566406 207.648438 L 373.746094 207.054688 L 373.660156 204.613281 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 415.195313 221.429688 L 416.324219 220.777344 L 416.671875 220.453125 L 416.582031 219.746094 L 415.195313 221.429688 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 428.679688 217.523438 L 428.160156 217.035156 L 429.851563 215.191406 L 425.125 216.980469 L 423.609375 216.925781 L 417.539063 219.421875 L 417.710938 220.507813 L 418.101563 220.128906 L 418.316406 220.019531 L 418.96875 220.128906 L 425.039063 219.042969 L 433.191406 216.277344 L 431.324219 216.4375 L 428.679688 217.523438 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 402.96875 258.644531 L 403.230469 258.644531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 402.96875 258.644531 L 405.398438 265.753906 L 405.484375 265.808594 L 403.230469 258.644531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 348.382813 273.457031 L 355.101563 271.503906 L 356.882813 271.503906 L 357.75 271.558594 L 363.992188 272.316406 L 364.773438 272.261719 L 365.984375 275.082031 L 374.222656 275.191406 L 382.808594 284.089844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 339.191406 273.402344 L 340.058594 271.070313 L 341.53125 269.875 L 344.699219 267.976563 L 349.855469 264.9375 L 350.203125 264.394531 L 351.070313 263.855469 L 352.070313 263.855469 L 355.625 262.660156 L 358.269531 260.597656 L 359.4375 258.265625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 401.84375 258.753906 L 388.835938 258.753906 L 383.675781 258.808594 L 381.636719 258.753906 L 359.4375 258.265625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 401.84375 258.753906 L 402.96875 262.117188 L 402.40625 261.683594 L 401.191406 261.683594 L 401.453125 262.550781 L 400.84375 262.660156 L 400.324219 262.660156 L 399.15625 262.605469 L 397.808594 263.691406 L 396.855469 261.847656 L 396.8125 261.46875 L 397.03125 264.667969 L 402.015625 264.558594 L 401.367188 266.785156 L 402.277344 266.347656 L 403.316406 264.234375 L 404.355469 266.785156 L 400.628906 270.09375 L 398.070313 269.007813 L 398.289063 268.410156 L 397.160156 268.410156 L 397.375 269.660156 L 397.074219 269.386719 L 394.601563 268.574219 L 397.246094 270.472656 L 398.070313 270.417969 L 397.636719 271.9375 L 396.855469 273.128906 L 394.773438 272.644531 L 396.121094 274.054688 L 397.160156 274 L 397.722656 273.835938 L 397.898438 273.347656 L 398.503906 273.347656 L 399.109375 273.402344 L 399.847656 273.347656 L 397.765625 275.898438 L 393.863281 275.953125 L 392.78125 277.308594 L 391.695313 276.113281 L 391.480469 277.523438 L 390.613281 278.5 L 387.882813 282.789063 L 387.75 282.246094 L 387.316406 283.003906 L 382.808594 284.089844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 402.144531 258.644531 L 402.621094 258.644531 L 402.710938 258.699219 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 402.144531 258.644531 L 402.40625 259.1875 L 402.621094 259.242188 L 402.710938 258.699219 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.914063 140.8125 L 241.550781 140.8125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.914063 169.78125 L 222.734375 169.78125 L 235.871094 169.835938 L 241.550781 169.78125 L 246.582031 169.78125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 352.457031 240.90625 L 354.28125 240.527344 L 355.101563 237.597656 L 356.835938 235.425781 L 357.75 236.402344 L 358.441406 235.261719 L 359.308594 232.769531 L 360.914063 231.574219 L 361.261719 231.738281 L 364.945313 229.621094 L 366.679688 224.140625 L 366.808594 220.453125 L 367.980469 219.910156 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 367.851563 207.378906 L 360.089844 210.851563 L 351.9375 212.316406 L 350.507813 212.097656 L 350.203125 212.476563 L 349.902344 212.371094 L 351.027344 211.664063 L 350.335938 210.90625 L 345.910156 209.984375 L 345.824219 209.441406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 367.980469 219.910156 L 367.9375 215.300781 L 367.851563 207.378906 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 197.847656 259.351563 L 220.523438 259.242188 L 220.957031 277.523438 L 223.773438 278.9375 L 226.332031 279.371094 L 227.417969 280.890625 L 231.621094 281.917969 L 234.917969 282.027344 L 236.953125 284.144531 L 238.734375 283.382813 L 239.816406 284.414063 L 240.035156 284.632813 L 241.289063 283.765625 L 241.984375 285.5 L 243.328125 283.277344 L 244.152344 284.199219 L 245.582031 283.925781 L 247.621094 285.230469 L 254.125 283.277344 L 256.378906 283.222656 L 262.1875 285.988281 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 37.554688 207.054688 L 35.949219 202.875 L 35.691406 200.109375 L 34.910156 199.078125 L 38.074219 188.824219 L 38.683594 181.609375 L 39.59375 173.90625 L 39.507813 167.503906 L 40.199219 167.613281 L 42.628906 167.070313 L 43.234375 167.070313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 92.445313 169.238281 L 77.097656 169.238281 L 60.40625 172.984375 L 58.84375 172.113281 L 58.410156 172.113281 L 52.125 173.527344 L 48.566406 172.875 L 47.65625 169.402344 L 43.234375 167.070313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 367.980469 219.910156 L 367.980469 228.644531 L 375.699219 228.644531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 373.660156 204.613281 L 370.929688 205.589844 L 367.851563 207.378906 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 433.625 213.292969 L 436.484375 212.371094 L 436.832031 210.851563 L 437.046875 210.363281 L 437.394531 212.152344 L 439.171875 211.445313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 365.164063 301.394531 L 366.332031 299.28125 L 366.117188 298.03125 L 367.632813 298.519531 L 367.9375 296.945313 L 372.621094 294.941406 L 372.664063 294.832031 L 372.402344 294.398438 L 372.921875 294.503906 L 377.34375 291.195313 L 377.648438 288.808594 L 378.386719 288.753906 L 382.808594 284.089844 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 189.824219 197.558594 L 189.867188 189.582031 L 189.824219 186.871094 L 189.867188 178.625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 344.308594 258.210938 L 352.242188 258.265625 L 359.4375 258.265625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 267.132813 323.203125 L 260.542969 325.699219 L 261.667969 324.453125 L 260.019531 324.617188 L 260.367188 322.445313 L 258.417969 323.152344 L 258.589844 326.894531 L 256.769531 329.28125 L 252.476563 332.210938 L 249.007813 333.351563 L 248.964844 332.808594 L 247.75 332.914063 L 246.925781 333.675781 L 245.84375 333.132813 L 246.625 334.597656 L 247.058594 335.628906 L 245.410156 336.226563 L 244.800781 335.628906 L 243.675781 338.230469 L 243.546875 337.796875 L 242.9375 338.015625 L 242.332031 338.015625 L 241.636719 337.90625 L 241.769531 341 L 239.121094 340.945313 L 240.511719 342.464844 L 239.554688 346.152344 L 239.382813 345.554688 L 237.953125 345.71875 L 237.476563 345.394531 L 238.34375 346.75 L 239.816406 347.238281 L 239.167969 350.65625 L 240.945313 356.570313 L 241.679688 358.195313 L 241.984375 358.902344 L 236 357.925781 L 227.761719 354.671875 L 225.507813 349.949219 L 224.292969 344.851563 L 219.527344 338.230469 L 215.535156 330.582031 L 212.414063 325.917969 L 210.03125 323.152344 L 203.742188 322.226563 L 201.054688 322.988281 L 199.148438 326.242188 L 196.851563 330.421875 L 186.703125 324.5625 L 183.710938 316.097656 L 173.351563 306.386719 L 171.007813 303.835938 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 136.929688 207.105469 L 136.886719 216.601563 L 152.0625 216.601563 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 422.132813 178.570313 L 436.179688 178.570313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 407.003906 244.703125 L 402.363281 253.167969 L 402.101563 252.40625 L 402.144531 252.351563 L 402.058594 251.972656 L 404.878906 245.300781 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 407.652344 244.59375 L 406.957031 246.222656 L 407.003906 246.386719 L 408.085938 244.703125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 394.039063 241.339844 L 396.726563 243.835938 L 400.109375 246.546875 L 399.15625 248.445313 L 395.511719 245.570313 L 399.242188 249.097656 L 399.328125 249.421875 L 399.023438 249.640625 L 400.066406 251.105469 L 398.851563 251.105469 L 398.851563 251.320313 L 398.632813 251.429688 L 398.632813 251.648438 L 398.242188 251.863281 L 399.589844 253.492188 L 399.589844 254.304688 L 397.59375 253.058594 L 395.296875 252.027344 L 395.902344 252.570313 L 398.503906 255.5 L 399.847656 255.335938 L 401.625 255.335938 L 403.230469 258.644531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 402.710938 258.699219 L 402.363281 257.832031 L 402.492188 257.722656 L 402.96875 258.644531 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 402.144531 258.644531 L 401.84375 258.375 L 401.84375 258.753906 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 389.183594 232.386719 L 388.183594 234.125 L 384.328125 231.628906 L 382.503906 235.589844 L 380.46875 237.703125 L 379.035156 237.378906 L 377.085938 241.015625 L 374.398438 239.496094 L 372.144531 244.433594 L 372.054688 244.703125 L 369.800781 248.390625 L 369.714844 249.421875 L 365.207031 250.941406 L 361.996094 251.703125 L 360.828125 251.972656 L 358.269531 251.703125 L 357.011719 249.316406 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 46.355469 144.882813 L 46.445313 145.75 L 46.183594 145.75 L 45.792969 144.773438 L 46.355469 144.882813 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 47.832031 146.453125 L 47.746094 145.152344 L 47.832031 146.453125 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 48.265625 144.5 L 47.613281 144.230469 L 46.921875 144.609375 L 46.878906 144.175781 L 47.746094 143.523438 L 48.265625 144.5 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 49 148.625 L 49.390625 146.726563 L 49.910156 147.59375 L 49.476563 148.246094 L 50.34375 149.980469 L 50.519531 149.980469 L 51.644531 150.792969 L 49 148.625 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 91.75 140.867188 L 53.378906 140.867188 L 48.742188 141.625 L 49.609375 143.46875 L 50.734375 143.742188 L 50.257813 145.859375 L 49.21875 145.75 L 51.644531 148.679688 L 52.644531 150.414063 L 51.210938 153.507813 L 51.644531 156.492188 L 50.910156 157.304688 L 50.390625 157.25 L 48.566406 158.605469 L 47.65625 158.550781 L 47.441406 159.472656 L 46.789063 158.496094 L 46.53125 157.792969 L 48.394531 156.707031 L 48.742188 157.738281 L 49.304688 157.035156 L 50.085938 156.492188 L 50.171875 154.429688 L 49.132813 154.59375 L 49.566406 153.128906 L 50.648438 151.878906 L 50.042969 151.609375 L 47.875 153.722656 L 46.53125 156.164063 L 45.921875 156.546875 L 47.832031 152.042969 L 48.480469 152.097656 L 49.132813 151.988281 L 49.304688 149.546875 L 49 150.089844 L 48.351563 149.601563 L 47.832031 150.035156 L 44.363281 149.167969 L 34.128906 146.5625 L 33.957031 148.082031 L 35.128906 151.609375 L 38.117188 159.855469 L 38.597656 159.3125 L 40.027344 159.746094 L 38.726563 161.046875 L 38.507813 161.375 L 39.984375 162.785156 L 39.722656 165.605469 L 39.160156 163.816406 L 38.726563 166.257813 L 43.582031 166.796875 L 43.234375 167.070313 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 293.101563 163.921875 L 290.109375 163.328125 L 289.199219 163.542969 L 290.199219 160.613281 L 289.589844 160.398438 L 289.375 160.503906 L 284.996094 162.1875 L 279.878906 162.1875 " type="plot-point" class="plot-point"/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 312.875 202.332031 L 312.484375 193.976563 L 314.609375 186.761719 L 316.992188 180.089844 L 318.597656 177.160156 L 318.683594 176.945313 L 318.769531 175.914063 L 316.082031 179.492188 L 313.699219 181.011719 L 311.007813 182.964844 L 314.433594 177.757813 " type="plot-point" class="plot-point"/><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/ATL.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 341.097656 286.238281 C 341.097656 289.839844 335.699219 289.839844 335.699219 286.238281 C 335.699219 282.640625 341.097656 282.640625 341.097656 286.238281 " type="plot-point" class="plot-point" xlink:title="ATL (Atlanta, GA)"><title>ATL (Atlanta, GA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/BNA.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 324.0625 262.71875 C 324.0625 266.320313 318.664063 266.320313 318.664063 262.71875 C 318.664063 259.121094 324.0625 259.121094 324.0625 262.71875 " type="plot-point" class="plot-point" xlink:title="BNA (Nashville, TN)"><title>BNA (Nashville, TN)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/BOS.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 442.664063 203.636719 C 442.664063 207.238281 437.265625 207.238281 437.265625 203.636719 C 437.265625 200.035156 442.664063 200.035156 442.664063 203.636719 " type="plot-point" class="plot-point" xlink:title="BOS (Boston, MA)"><title>BOS (Boston, MA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/BWI.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 399.8125 233.832031 C 399.8125 237.429688 394.410156 237.429688 394.410156 233.832031 C 394.410156 230.230469 399.8125 230.230469 399.8125 233.832031 " type="plot-point" class="plot-point" xlink:title="BWI (Baltimore, MD)"><title>BWI (Baltimore, MD)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/CLE.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 360.605469 212.664063 C 360.605469 216.265625 355.203125 216.265625 355.203125 212.664063 C 355.203125 209.0625 360.605469 209.0625 360.605469 212.664063 " type="plot-point" class="plot-point" xlink:title="CLE (Cleveland, OH)"><title>CLE (Cleveland, OH)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/CLT.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 367.460938 271.339844 C 367.460938 274.941406 362.0625 274.941406 362.0625 271.339844 C 362.0625 267.742188 367.460938 267.742188 367.460938 271.339844 " type="plot-point" class="plot-point" xlink:title="CLT (Charlotte, NC)"><title>CLT (Charlotte, NC)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/CVG.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 339.320313 235.054688 C 339.320313 238.65625 333.917969 238.65625 333.917969 235.054688 C 333.917969 231.457031 339.320313 231.457031 339.320313 235.054688 " type="plot-point" class="plot-point" xlink:title="CVG (Covington, KY)"><title>CVG (Covington, KY)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/DCA.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 397.015625 236.894531 C 397.015625 240.492188 391.613281 240.492188 391.613281 236.894531 C 391.613281 233.292969 397.015625 233.292969 397.015625 236.894531 " type="plot-point" class="plot-point" xlink:title="DCA (Arlington, VA)"><title>DCA (Arlington, VA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/DEN.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 187.9375 227.363281 C 187.9375 230.964844 182.535156 230.964844 182.535156 227.363281 C 182.535156 223.765625 187.9375 223.765625 187.9375 227.363281 " type="plot-point" class="plot-point" xlink:title="DEN (Denver, CO)"><title>DEN (Denver, CO)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/DFW.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 245.671875 293.289063 C 245.671875 296.890625 240.273438 296.890625 240.273438 293.289063 C 240.273438 289.6875 245.671875 289.6875 245.671875 293.289063 " type="plot-point" class="plot-point" xlink:title="DFW (Dallas-Fort Worth, TX)"><title>DFW (Dallas-Fort Worth, TX)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/DTW.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 349.257813 205.078125 C 349.257813 208.679688 343.855469 208.679688 343.855469 205.078125 C 343.855469 201.476563 349.257813 201.476563 349.257813 205.078125 " type="plot-point" class="plot-point" xlink:title="DTW (Detroit, MI)"><title>DTW (Detroit, MI)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/EWR.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 418.726563 219.464844 C 418.726563 223.066406 413.324219 223.066406 413.324219 219.464844 C 413.324219 215.867188 418.726563 215.867188 418.726563 219.464844 " type="plot-point" class="plot-point" xlink:title="EWR (Newark, NJ)"><title>EWR (Newark, NJ)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/IAH.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 258.519531 320.894531 C 258.519531 324.496094 253.117188 324.496094 253.117188 320.894531 C 253.117188 317.292969 258.519531 317.292969 258.519531 320.894531 " type="plot-point" class="plot-point" xlink:title="IAH (Houston, TX)"><title>IAH (Houston, TX)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/LAS.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 108.589844 263.136719 C 108.589844 266.738281 103.191406 266.738281 103.191406 263.136719 C 103.191406 259.539063 108.589844 259.539063 108.589844 263.136719 " type="plot-point" class="plot-point" xlink:title="LAS (Las Vegas, NV)"><title>LAS (Las Vegas, NV)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/LAX.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 83.953125 283.378906 C 83.953125 286.980469 78.554688 286.980469 78.554688 283.378906 C 78.554688 279.78125 83.953125 279.78125 83.953125 283.378906 " type="plot-point" class="plot-point" xlink:title="LAX (Los Angeles, CA)"><title>LAX (Los Angeles, CA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/LGA.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 420.964844 218.664063 C 420.964844 222.265625 415.566406 222.265625 415.566406 218.664063 C 415.566406 215.0625 420.964844 215.0625 420.964844 218.664063 " type="plot-point" class="plot-point" xlink:title="LGA (New York, NY)"><title>LGA (New York, NY)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/MCO.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 364.640625 335.585938 C 364.640625 339.1875 359.238281 339.1875 359.238281 335.585938 C 359.238281 331.984375 364.640625 331.984375 364.640625 335.585938 " type="plot-point" class="plot-point" xlink:title="MCO (Orlando, FL)"><title>MCO (Orlando, FL)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/MEM.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 299.101563 272.964844 C 299.101563 276.566406 293.703125 276.566406 293.703125 272.964844 C 293.703125 269.363281 299.101563 269.363281 299.101563 272.964844 " type="plot-point" class="plot-point" xlink:title="MEM (Memphis, TN)"><title>MEM (Memphis, TN)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/MIA.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 372.398438 360.542969 C 372.398438 364.140625 367 364.140625 367 360.542969 C 367 356.941406 372.398438 356.941406 372.398438 360.542969 " type="plot-point" class="plot-point" xlink:title="MIA (Miami, FL)"><title>MIA (Miami, FL)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/MSP.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 274.582031 179.8125 C 274.582031 183.410156 269.183594 183.410156 269.183594 179.8125 C 269.183594 176.210938 274.582031 176.210938 274.582031 179.8125 " type="plot-point" class="plot-point" xlink:title="MSP (Minneapolis, MN)"><title>MSP (Minneapolis, MN)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/ORD.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 314.785156 207.28125 C 314.785156 210.878906 309.382813 210.878906 309.382813 207.28125 C 309.382813 203.679688 314.785156 203.679688 314.785156 207.28125 " type="plot-point" class="plot-point" xlink:title="ORD (Chicago, IL)"><title>ORD (Chicago, IL)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/PHL.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 410.609375 227.234375 C 410.609375 230.835938 405.210938 230.835938 405.210938 227.234375 C 405.210938 223.636719 410.609375 223.636719 410.609375 227.234375 " type="plot-point" class="plot-point" xlink:title="PHL (Philadelphia, PA)"><title>PHL (Philadelphia, PA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/PHX.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 132.386719 288.191406 C 132.386719 291.792969 126.984375 291.792969 126.984375 288.191406 C 126.984375 284.59375 132.386719 284.59375 132.386719 288.191406 " type="plot-point" class="plot-point" xlink:title="PHX (Phoenix, AZ)"><title>PHX (Phoenix, AZ)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/PIT.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 372.835938 221.371094 C 372.835938 224.96875 367.4375 224.96875 367.4375 221.371094 C 367.4375 217.769531 372.835938 217.769531 372.835938 221.371094 " type="plot-point" class="plot-point" xlink:title="PIT (Pittsburgh, PA)"><title>PIT (Pittsburgh, PA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/RDU.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 383.773438 265.058594 C 383.773438 268.65625 378.375 268.65625 378.375 265.058594 C 378.375 261.457031 383.773438 261.457031 383.773438 265.058594 " type="plot-point" class="plot-point" xlink:title="RDU (Raleigh, NC)"><title>RDU (Raleigh, NC)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/SAN.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 93.175781 294.828125 C 93.175781 298.425781 87.773438 298.425781 87.773438 294.828125 C 87.773438 291.226563 93.175781 291.226563 93.175781 294.828125 " type="plot-point" class="plot-point" xlink:title="SAN (San Diego, CA)"><title>SAN (San Diego, CA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/SEA.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 54.433594 155.492188 C 54.433594 159.09375 49.03125 159.09375 49.03125 155.492188 C 49.03125 151.890625 54.433594 151.890625 54.433594 155.492188 " type="plot-point" class="plot-point" xlink:title="SEA (Seattle, WA)"><title>SEA (Seattle, WA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/SFO.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 53.9375 248.570313 C 53.9375 252.167969 48.535156 252.167969 48.535156 248.570313 C 48.535156 244.96875 53.9375 244.96875 53.9375 248.570313 " type="plot-point" class="plot-point" xlink:title="SFO (San Francisco, CA)"><title>SFO (San Francisco, CA)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/SLC.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 132.613281 218.558594 C 132.613281 222.160156 127.214844 222.160156 127.214844 218.558594 C 127.214844 214.957031 132.613281 214.957031 132.613281 218.558594 " type="plot-point" class="plot-point" xlink:title="SLC (Salt Lake City, UT)"><title>SLC (Salt Lake City, UT)</title></path></a><a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="plots/STL.png" class="link"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,100%);fill-opacity:1;" d="M 296.203125 237.882813 C 296.203125 241.480469 290.800781 241.480469 290.800781 237.882813 C 290.800781 234.28125 296.203125 234.28125 296.203125 237.882813 " type="plot-point" class="plot-point" xlink:title="STL (St Louis, MO)"><title>STL (St Louis, MO)</title></path></a></g></g><g id="checkboxes"/><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/home/chcai/R/x86_64-unknown-linux-gnu-library/3.0/SVGAnnotation/SVGGUI/helper_functions.js"><![CDATA[/**
 * @fileoverview
 * 
 * ECMAScript <a href="http://www.carto.net/papers/svg/resources/helper_functions.html">helper functions</a>, main purpose is to serve in SVG mapping or other SVG based web applications
 *
 * This ECMA script library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library (http://www.carto.net/papers/svg/resources/lesser_gpl.txt); if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Please report bugs and send improvements to neumann@karto.baug.ethz.ch
 * If you use these scripts, please link to the original (http://www.carto.net/papers/svg/resources/helper_functions.html)
 * somewhere in the source-code-comment or the "about" of your project and give credits, thanks!
 * 
 * See <a href="js_docs_out/overview-summary-helper_functions.js.html">documentation</a>. 
 * 
 * @author Andreas Neumann a.neumann@carto.net
 * @copyright LGPL 2.1 <a href="http://www.gnu.org/copyleft/lesser.txt">Gnu LGPL 2.1</a>
 * @credits Bruce Rindahl, numerous people on svgdevelopers@yahoogroups.com
 */

//global variables necessary to create elements in these namespaces, do not delete them!!!!

/**
 * This variable is a shortcut to the full URL of the SVG namespace
 * @final
 * @type String
 */
var svgNS = "http://www.w3.org/2000/svg";

/**
 * This variable is a shortcut to the full URL of the XLink namespace
 * @final
 * @type String
 */
var xlinkNS = "http://www.w3.org/1999/xlink";

/**
 * This variable is a shortcut to the full URL of the attrib namespace
 * @final
 * @type String
 */
var cartoNS = "http://www.carto.net/attrib";

/**
 * This variable is a alias to the full URL of the attrib namespace
 * @final
 * @type String
 */
var attribNS = "http://www.carto.net/attrib";

/**
 * This variable is a alias to the full URL of the Batik extension namespace
 * @final
 * @type String
 */
var batikNS = "http://xml.apache.org/batik/ext";

/**
 * Returns the polar direction from a given vector
 * @param {Number} xdiff	the x-part of the vector
 * @param {Number} ydiff	the y-part of the vector
 * @return direction		the direction in radians
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDist
 * @see #toRectX
 * @see #toRectY
 */
function toPolarDir(xdiff,ydiff) {
   var direction = (Math.atan2(ydiff,xdiff));
   return(direction);
}

/**
 * Returns the polar distance from a given vector
 * @param {Number} xdiff	the x-part of the vector
 * @param {Number} ydiff	the y-part of the vector
 * @return distance			the distance
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDir
 * @see #toRectX
 * @see #toRectY
 */
function toPolarDist(xdiff,ydiff) {
   var distance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
   return(distance);
}

/**
 * Returns the x-part of a vector from a given direction and distance
 * @param {Number} direction	the direction (in radians)
 * @param {Number} distance		the distance
 * @return x					the x-part of the vector
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDist
 * @see #toPolarDir
 * @see #toRectY
 */
function toRectX(direction,distance) {
   var x = distance * Math.cos(direction);
   return(x);
}

/**
 * Returns the y-part of the vector from a given direction and distance
 * @param {Number} direction	the direction (in radians)
 * @param {Number} distance		the distance
 * @return y					the y-part of the vector
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDist
 * @see #toPolarDir
 * @see #toRectX
 */
function toRectY(direction,distance) {
   y = distance * Math.sin(direction);
   return(y);
}

/**
 * Converts degrees to radians
 * @param {Number} deg	the degree value
 * @return rad			the radians value
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #RadToDeg
 */
function DegToRad(deg) {
     return (deg / 180.0 * Math.PI);
}

/**
 * Converts radians to degrees
 * @param {Number} rad	the radians value
 * @return deg			the degree value
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #DegToRad
 */
function RadToDeg(rad) {
     return (rad / Math.PI * 180.0);
}

/**
 * Converts decimal degrees to degrees, minutes, seconds
 * @param {Number} dd	the decimal degree value
 * @return degrees		the degree values in the following notation: {deg:degrees,min:minutes,sec:seconds}
 * @type literal
 * @version 1.0 (2007-04-30)
 * @see #dms2dd
 */
function dd2dms(dd) {
        var minutes = (Math.abs(dd) - Math.floor(Math.abs(dd))) * 60;
        var seconds = (minutes - Math.floor(minutes)) * 60;
        var minutes = Math.floor(minutes);
        if (dd >= 0) {
            var degrees = Math.floor(dd);
        }
        else {
            var degrees = Math.ceil(dd);       
        }
        return {deg:degrees,min:minutes,sec:seconds};
}

/**
 * Converts degrees, minutes and seconds to decimal degrees
 * @param {Number} deg	the degree value
 * @param {Number} min	the minute value
 * @param {Number} sec	the second value
 * @return deg			the decimal degree values
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #dd2dms
 */
function dms2dd(deg,min,sec) {
	if (deg < 0) {
		return deg - (min / 60) - (sec / 3600);
	}
	else {
		return deg + (min / 60) + (sec / 3600);
	}
}

/**
 * log function, missing in the standard Math object
 * @param {Number} x	the value where the log function should be applied to
 * @param {Number} b	the base value for the log function
 * @return logResult	the result of the log function
 * @type Number
 * @version 1.0 (2007-04-30)
 */
function log(x,b) {
	if(b==null) b=Math.E;
	return Math.log(x)/Math.log(b);
}

/**
 * interpolates a value (e.g. elevation) bilinearly based on the position within a cell with 4 corner values
 * @param {Number} za		the value at the upper left corner of the cell
 * @param {Number} zb		the value at the upper right corner of the cell
 * @param {Number} zc		the value at the lower right corner of the cell
 * @param {Number} zd		the value at the lower left corner of the cell
 * @param {Number} xpos		the x position of the point where a new value should be interpolated
 * @param {Number} ypos		the y position of the point where a new value should be interpolated
 * @param {Number} ax		the x position of the lower left corner of the cell
 * @param {Number} ay		the y position of the lower left corner of the cell
 * @param {Number} cellsize	the size of the cell
 * @return interpol_value	the result of the bilinear interpolation function
 * @type Number
 * @version 1.0 (2007-04-30)
 */
function intBilinear(za,zb,zc,zd,xpos,ypos,ax,ay,cellsize) { //bilinear interpolation function
	var e = (xpos - ax) / cellsize;
	var f = (ypos - ay) / cellsize;

	//calculation of weights
	var wa = (1 - e) * (1 - f);
	var wb = e * (1 - f);
	var wc = e * f;
	var wd = f * (1 - e);

	var interpol_value = wa * zc + wb * zd + wc * za + wd * zb;
	return interpol_value;	
}

/**
 * tests if a given point is left or right of a given line
 * @param {Number} pointx		the x position of the given point
 * @param {Number} pointy		the y position of the given point
 * @param {Number} linex1		the x position of line's start point
 * @param {Number} liney1		the y position of line's start point
 * @param {Number} linex2		the x position of line's end point
 * @param {Number} liney2		the y position of line's end point
 * @return leftof				the result of the leftOfTest, 1 means leftOf, 0 means rightOf
 * @type Number (integer, 0|1)
 * @version 1.0 (2007-04-30)
 */
function leftOfTest(pointx,pointy,linex1,liney1,linex2,liney2) {
	var result = (liney1 - pointy) * (linex2 - linex1) - (linex1 - pointx) * (liney2 - liney1);
	if (result < 0) {
		var leftof = 1; //case left of
	}
	else {
		var leftof = 0; //case left of	
	}
	return leftof;
}

/**
 * calculates the distance between a given point and a given line
 * @param {Number} pointx		the x position of the given point
 * @param {Number} pointy		the y position of the given point
 * @param {Number} linex1		the x position of line's start point
 * @param {Number} liney1		the y position of line's start point
 * @param {Number} linex2		the x position of line's end point
 * @param {Number} liney2		the y position of line's end point
 * @return distance				the result of the leftOfTest, 1 means leftOf, 0 means rightOf
 * @type Number
 * @version 1.0 (2007-04-30)
 */
function distFromLine(xpoint,ypoint,linex1,liney1,linex2,liney2) {
	var dx = linex2 - linex1;
	var dy = liney2 - liney1;
	var distance = (dy * (xpoint - linex1) - dx * (ypoint - liney1)) / Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
	return distance;
}

/**
 * calculates the angle between two vectors (lines)
 * @param {Number} ax		the x part of vector a
 * @param {Number} ay		the y part of vector a
 * @param {Number} bx		the x part of vector b
 * @param {Number} by		the y part of vector b
 * @return angle			the angle in radians
 * @type Number
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://www.mathe-online.at/mathint/vect2/i.html#Winkel">Mathe Online (Winkel)</a>
 */
function angleBetwTwoLines(ax,ay,bx,by) {
	var angle = Math.acos((ax * bx + ay * by) / (Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2)) * Math.sqrt(Math.pow(bx,2) + Math.pow(by,2))));
	return angle;
}

/**
 * calculates the bisector vector for two given vectors
 * @param {Number} ax		the x part of vector a
 * @param {Number} ay		the y part of vector a
 * @param {Number} bx		the x part of vector b
 * @param {Number} by		the y part of vector b
 * @return c				the resulting vector as an Array, c[0] is the x part of the vector, c[1] is the y part
 * @type Array
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://www.mathe-online.at/mathint/vect1/i.html#Winkelsymmetrale">Mathe Online (Winkelsymmetrale)</a>
 * see #calcBisectorAngle
 *  */
function calcBisectorVector(ax,ay,bx,by) {
	var betraga = Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2));
	var betragb = Math.sqrt(Math.pow(bx,2) + Math.pow(by,2));
	var c = new Array();
	c[0] = ax / betraga + bx / betragb;
	c[1] = ay / betraga + by / betragb;
	return c;
}

/**
 * calculates the bisector angle for two given vectors
 * @param {Number} ax		the x part of vector a
 * @param {Number} ay		the y part of vector a
 * @param {Number} bx		the x part of vector b
 * @param {Number} by		the y part of vector b
 * @return angle			the bisector angle in radians
 * @type Number
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://www.mathe-online.at/mathint/vect1/i.html#Winkelsymmetrale">Mathe Online (Winkelsymmetrale)</a>
 * see #calcBisectorVector
 * */
function calcBisectorAngle(ax,ay,bx,by) {
	var betraga = Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2));
	var betragb = Math.sqrt(Math.pow(bx,2) + Math.pow(by,2));
	var c1 = ax / betraga + bx / betragb;
	var c2 = ay / betraga + by / betragb;
	var angle = toPolarDir(c1,c2);
	return angle;
}

/**
 * calculates the intersection point of two given lines
 * @param {Number} line1x1	the x the start point of line 1
 * @param {Number} line1y1	the y the start point of line 1
 * @param {Number} line1x2	the x the end point of line 1
 * @param {Number} line1y2	the y the end point of line 1
 * @return interSectPoint	the intersection point, interSectPoint.x contains x-part, interSectPoint.y the y-part of the resulting coordinate
 * @type Object
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/">P. Bourke</a>
 */
function intersect2lines(line1x1,line1y1,line1x2,line1y2,line2x1,line2y1,line2x2,line2y2) {
	var interSectPoint = new Object();
	var denominator = (line2y2 - line2y1)*(line1x2 - line1x1) - (line2x2 - line2x1)*(line1y2 - line1y1);
	if (denominator == 0) {
		alert("lines are parallel");
	}
	else {
		var ua = ((line2x2 - line2x1)*(line1y1 - line2y1) - (line2y2 - line2y1)*(line1x1 - line2x1)) / denominator;
		var ub = ((line1x2 - line1x1)*(line1y1 - line2y1) - (line1y2 - line1y1)*(line1x1 - line2x1)) / denominator;
	}
	interSectPoint["x"] = line1x1 + ua * (line1x2 - line1x1);
	interSectPoint["y"] = line1y1 + ua * (line1y2 - line1y1);
	return interSectPoint;
}

/**
 * reformats a given number to a string by adding separators at every third digit
 * @param {String|Number} inputNumber	the input number, can be of type number or string
 * @param {String} separator			the separator, e.g. ' or ,
 * @return newString					the intersection point, interSectPoint.x contains x-part, interSectPoint.y the y-part of the resulting coordinate
 * @type String
 * @version 1.0 (2007-04-30)
 */
function formatNumberString(inputNumber,separator) {
	//check if of type string, if number, convert it to string
	if (typeof(inputNumber) == "Number") {
		var myTempString = inputNumber.toString();
	}
	else {
		var myTempString = inputNumber;
	}
	var newString="";
	//if it contains a comma, it will be split
	var splitResults = myTempString.split(".");
	var myCounter = splitResults[0].length;
	if (myCounter > 3) {
		while(myCounter > 0) {
			if (myCounter > 3) {
				newString = separator + splitResults[0].substr(myCounter - 3,3) + newString;
			}
			else {
				newString = splitResults[0].substr(0,myCounter) + newString;
			}
			myCounter -= 3;
		}
	}
	else {
		newString = splitResults[0];
	}
	//concatenate if it contains a comma
	if (splitResults[1]) {
		newString = newString + "." + splitResults[1];
	}
	return newString;
}

/**
 * writes a status text message out to a SVG text element's first child
 * @param {String} statusText	the text message to be displayed
 * @version 1.0 (2007-04-30)
 */
 function statusChange(statusText) {
	document.getElementById("statusText").firstChild.nodeValue = "Statusbar: " + statusText;
}

/**
 * scales an SVG element, requires that the element has an x and y attribute (e.g. circle, ellipse, use element, etc.)
 * @param {dom::Event} evt		the evt object that triggered the scaling
 * @param {Number} factor	the scaling factor
 * @version 1.0 (2007-04-30)
 */
function scaleObject(evt,factor) {
	//reference to the currently selected object
	var element = evt.currentTarget;
	var myX = element.getAttributeNS(null,"x");
	var myY = element.getAttributeNS(null,"y");
	var newtransform = "scale(" + factor + ") translate(" + (myX * 1 / factor - myX) + " " + (myY * 1 / factor - myY) +")";
	element.setAttributeNS(null,'transform', newtransform);
}

/**
 * returns the transformation matrix (ctm) for the given node up to the root element
 * the basic use case is to provide a wrapper function for the missing SVGLocatable.getTransformToElement method (missing in ASV3)
 * @param {svg::SVGTransformable} node		the node reference for the SVGElement the ctm is queried
 * @return CTM								the current transformation matrix from the given node to the root element
 * @type svg::SVGMatrix
 * @version 1.0 (2007-05-01)
 * @credits <a href="http://www.kevlindev.com/tutorials/basics/transformations/toUserSpace/index.htm">Kevin Lindsey (toUserSpace)</a>
 * @see #getTransformToElement
 */
function getTransformToRootElement(node) {
 	try {
		//this part is for fully conformant players (like Opera, Batik, Firefox, Safari ...)
		var CTM = node.getTransformToElement(document.documentElement);
	}
	catch (ex) {
		//this part is for ASV3 or other non-conformant players
		// Initialize our CTM the node's Current Transformation Matrix
		var CTM = node.getCTM();
		// Work our way through the ancestor nodes stopping at the SVG Document
		while ( ( node = node.parentNode ) != document ) {
			// Multiply the new CTM to the one with what we have accumulated so far
			CTM = node.getCTM().multiply(CTM);
		}
	}
	return CTM;
}

/**
 * returns the transformation matrix (ctm) for the given dom::Node up to a different dom::Node
 * the basic use case is to provide a wrapper function for the missing SVGLocatable.getTransformToElement method (missing in ASV3)
 * @param {svg::SVGTransformable} node			the node reference for the element the where the ctm should be calculated from
 * @param {svg::SVGTransformable} targetNode	the target node reference for the element the ctm should be calculated to
 * @return CTM									the current transformation matrix from the given node to the target element
 * @type svg::SVGMatrix
 * @version 1.0 (2007-05-01)
 * @credits <a href="http://www.kevlindev.com/tutorials/basics/transformations/toUserSpace/index.htm">Kevin Lindsey (toUserSpace)</a>
 * @see #getTransformToRootElement
 */
function getTransformToElement(node,targetNode) {
    try {
        //this part is for fully conformant players
        var CTM = node.getTransformToElement(targetNode);
    }
    catch (ex) {
  		//this part is for ASV3 or other non-conformant players
		// Initialize our CTM the node's Current Transformation Matrix
		var CTM = node.getCTM();
		// Work our way through the ancestor nodes stopping at the SVG Document
		while ( ( node = node.parentNode ) != targetNode ) {
			// Multiply the new CTM to the one with what we have accumulated so far
			CTM = node.getCTM().multiply(CTM);
		}
    }
    return CTM;
}

/**
 * converts HSV to RGB values
 * @param {Number} hue		the hue value (between 0 and 360)
 * @param {Number} sat		the saturation value (between 0 and 1)
 * @param {Number} val		the value value (between 0 and 1)
 * @return rgbArr			the rgb values (associative array or object, the keys are: red,green,blue), all values are scaled between 0 and 255
 * @type Object
 * @version 1.0 (2007-05-01)
 * @see #rgb2hsv
 */
function hsv2rgb(hue,sat,val) {
	var rgbArr = new Object();
	if ( sat == 0) {
		rgbArr["red"] = Math.round(val * 255);
		rgbArr["green"] = Math.round(val * 255);
		rgbArr["blue"] = Math.round(val * 255);
	}
	else {
		var h = hue / 60;
		var i = Math.floor(h);
		var f = h - i;
		if (i % 2 == 0) {
			f = 1 - f;
		}
		var m = val * (1 - sat); 
		var n = val * (1 - sat * f);
		switch(i) {
			case 0:
				rgbArr["red"] = val;
				rgbArr["green"] = n;
				rgbArr["blue"] = m;
				break;
			case 1:
				rgbArr["red"] = n;
				rgbArr["green"] = val;
				rgbArr["blue"] = m;
				break;
			case 2:
				rgbArr["red"] = m;
				rgbArr["green"] = val;
				rgbArr["blue"] = n;
				break;
			case 3:
				rgbArr["red"] = m;
				rgbArr["green"] = n;
				rgbArr["blue"] = val;
				break;
			case 4:
				rgbArr["red"] = n;
				rgbArr["green"] = m;
				rgbArr["blue"] = val;
				break;
			case 5:
				rgbArr["red"] = val;
				rgbArr["green"] = m;
				rgbArr["blue"] = n;
				break;
			case 6:
				rgbArr["red"] = val;
				rgbArr["green"] = n;
				rgbArr["blue"] = m;
				break;
		}
		rgbArr["red"] = Math.round(rgbArr["red"] * 255);
		rgbArr["green"] = Math.round(rgbArr["green"] * 255);
		rgbArr["blue"] = Math.round(rgbArr["blue"] * 255);
	}
	return rgbArr;
}

/**
 * converts RGB to HSV values
 * @param {Number} red		the hue value (between 0 and 255)
 * @param {Number} green	the saturation value (between 0 and 255)
 * @param {Number} blue		the value value (between 0 and 255)
 * @return hsvArr			the hsv values (associative array or object, the keys are: hue (0-360),sat (0-1),val (0-1))
 * @type Object
 * @version 1.0 (2007-05-01)
 * @see #hsv2rgb
 */
function rgb2hsv(red,green,blue) {
	var hsvArr = new Object();
	red = red / 255;
	green = green / 255;
	blue = blue / 255;
	myMax = Math.max(red, Math.max(green,blue));
	myMin = Math.min(red, Math.min(green,blue));
	v = myMax;
	if (myMax > 0) {
		s = (myMax - myMin) / myMax;
	}
	else {
		s = 0;
	}
	if (s > 0) {
		myDiff = myMax - myMin;
		rc = (myMax - red) / myDiff;
		gc = (myMax - green) / myDiff;
		bc = (myMax - blue) / myDiff;
		if (red == myMax) {
			h = (bc - gc) / 6;
		}
		if (green == myMax) {
			h = (2 + rc - bc) / 6;
		}
		if (blue == myMax) {
			h = (4 + gc - rc) / 6;
		}
	}
	else {
		h = 0;
	}
	if (h < 0) {
		h += 1;
	}
	hsvArr["hue"] = Math.round(h * 360);
	hsvArr["sat"] = s;
	hsvArr["val"] = v;
	return hsvArr;
}

/**
 * populates an array such that it can be addressed by both a key or an index nr,
 * note that both Arrays need to be of the same length
 * @param {Array} arrayKeys		the array containing the keys
 * @param {Array} arrayValues	the array containing the values
 * @return returnArray			the resulting array containing both associative values and also a regular indexed array
 * @type Array
 * @version 1.0 (2007-05-01)
 */
function arrayPopulate(arrayKeys,arrayValues) {
	var returnArray = new Array();
	if (arrayKeys.length != arrayValues.length) {
		alert("error: arrays do not have the same length!");
	}
	else {
		for (i=0;i<arrayKeys.length;i++) {
			returnArray[arrayKeys[i]] = arrayValues[i];
		}
	}
	return returnArray;
}

/**
 * Wrapper object for network requests, uses getURL or XMLHttpRequest depending on availability
 * The callBackFunction receives a XML or text node representing the rootElement
 * of the fragment received or the return text, depending on the returnFormat. 
 * See also the following <a href="http://www.carto.net/papers/svg/network_requests/">documentation</a>.
 * @class this is a wrapper object to provide network request functionality (get|post)
 * @param {String} url												the URL/IRI of the network resource to be called
 * @param {Function|Object} callBackFunction						the callBack function or object that is called after the data was received, in case of an object, the method 'receiveData' is called; both the function and the object's 'receiveData' method get 2 return parameters: 'node.firstChild'|text (the root element of the XML or text resource), this.additionalParams (if defined) 
 * @param {String} returnFormat										the return format, either 'xml' or 'json' (or text)
 * @param {String} method											the method of the network request, either 'get' or 'post'
 * @param {String|Undefined} postText								the String containing the post text (optional) or Undefined (if not a 'post' request)
 * @param {Object|Array|String|Number|Undefined} additionalParams	additional parameters that will be passed to the callBackFunction or object (optional) or Undefined
 * @return a new getData instance
 * @type getData
 * @constructor
 * @version 1.0 (2007-02-23)
 */
function getData(url,callBackFunction,returnFormat,method,postText,additionalParams) {
	this.url = url;
	this.callBackFunction = callBackFunction;
	this.returnFormat = returnFormat;
	this.method = method;
	this.additionalParams = additionalParams;
	if (method != "get" && method != "post") {
		alert("Error in network request: parameter 'method' must be 'get' or 'post'");
	}
	this.postText = postText;
	this.xmlRequest = null; //@private reference to the XMLHttpRequest object
} 

/**
 * triggers the network request defined in the constructor
 */
getData.prototype.getData = function() {
	//call getURL() if available
	if (window.getURL) {
		if (this.method == "get") {
			getURL(this.url,this);
		}
		if (this.method == "post") {
			postURL(this.url,this.postText,this);
		}
	}
	//or call XMLHttpRequest() if available
	else if (window.XMLHttpRequest) {
		var _this = this;
		this.xmlRequest = new XMLHttpRequest();
		if (this.method == "get") {
			if (this.returnFormat == "xml") {
				this.xmlRequest.overrideMimeType("text/xml");
			}
			this.xmlRequest.open("GET",this.url,true);
		}
		if (this.method == "post") {
			this.xmlRequest.open("POST",this.url,true);
		}
		this.xmlRequest.onreadystatechange = function() {_this.handleEvent()};
		if (this.method == "get") {
			this.xmlRequest.send(null);
		}
		if (this.method == "post") {
			//test if postText exists and is of type string
			var reallyPost = true;
			if (!this.postText) {
				reallyPost = false;
				alert("Error in network post request: missing parameter 'postText'!");
			}
			if (typeof(this.postText) != "string") {
				reallyPost = false;
				alert("Error in network post request: parameter 'postText' has to be of type 'string')");
			}
			if (reallyPost) {
				this.xmlRequest.send(this.postText);
			}
		}
	}
	//write an error message if neither method is available
	else {
		alert("your browser/svg viewer neither supports window.getURL nor window.XMLHttpRequest!");
	}	
}

/**
 * this is the callback method for the getURL() or postURL() case
 * @private
 */
getData.prototype.operationComplete = function(data) {
	//check if data has a success property
	if (data.success) {
		//parse content of the XML format to the variable "node"
		if (this.returnFormat == "xml") {
			//convert the text information to an XML node and get the first child
			var node = parseXML(data.content,document);
			//distinguish between a callback function and an object
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(node.firstChild,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(node.firstChild,this.additionalParams);
			}
		}
		if (this.returnFormat == "json") {
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(data.content,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(data.content,this.additionalParams);
			}			
		}
	}
	else {
		alert("something went wrong with dynamic loading of geometry!");
	}
}

/**
 * this is the callback method for the XMLHttpRequest case
 * @private
 */
getData.prototype.handleEvent = function() {
	if (this.xmlRequest.readyState == 4) {
		if (this.returnFormat == "xml") {
			//we need to import the XML node first
			var importedNode = document.importNode(this.xmlRequest.responseXML.documentElement,true);
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(importedNode,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(importedNode,this.additionalParams);
			}			
		}
		if (this.returnFormat == "json") {
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(this.xmlRequest.responseText,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(this.xmlRequest.responseText,this.additionalParams);
			}			
		}		
	}	
}

/**
 * Serializes an XML node and returns a string representation. Wrapper function to hide implementation differences. 
 * This can be used for debugging purposes or to post data to a server or network resource.
 * @param {dom::Node} node		the DOM node reference
 * @return textRepresentation	the String representation of the XML node
 * @type String
 * @version 1.0 (2007-05-01)
 * @see getData
 */
function serializeNode(node) {
  if (typeof XMLSerializer != 'undefined') {
    return new XMLSerializer().serializeToString(node);
  }
  else if (typeof node.xml != 'undefined') {
    return node.xml;
  }
  else if (typeof printNode != 'undefined') {
    return printNode(node);
  }
  else if (typeof Packages != 'undefined') {
    try {
      var stringWriter = new java.io.StringWriter();
      Packages.org.apache.batik.dom.util.DOMUtilities.writeNode(node,stringWriter);
      return stringWriter.toString();
    }
    catch (e) {
       alert("Sorry, your SVG viewer does not support the printNode/serialize function.");
       return '';
    }
  }
  else {
    alert("Sorry, your SVG viewer does not support the printNode/serialize function.");
    return '';
  }
}

/**
 * Starts a SMIL animation element with the given id by triggering the '.beginElement()' method. 
 * This is a convenience (shortcut) function. 
 * @param {String} id		a valid id of a valid SMIL animation element
 * @version 1.0 (2007-05-01)
 */
//starts an animtion with the given id
//this function is useful in combination with window.setTimeout()
function startAnimation(id) {
		document.getElementById(id).beginElement();
}]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/home/chcai/R/x86_64-unknown-linux-gnu-library/3.0/SVGAnnotation/SVGGUI/timer.js"><![CDATA[// source/credits: "Algorithm": http://www.codingforums.com/showthread.php?s=&threadid=10531
// The constructor should be called with
// the parent object (optional, defaults to window).

function Timer(){
    this.obj = (arguments.length)?arguments[0]:window;
    return this;
}

// The set functions should be called with:
// - The name of the object method (as a string) (required)
// - The millisecond delay (required)
// - Any number of extra arguments, which will all be
//   passed to the method when it is evaluated.

Timer.prototype.setInterval = function(func, msec){
    var i = Timer.getNew();
    var t = Timer.buildCall(this.obj, i, arguments);
    Timer.set[i].timer = window.setInterval(t,msec);
    return i;
}
Timer.prototype.setTimeout = function(func, msec){
    var i = Timer.getNew();
    Timer.buildCall(this.obj, i, arguments);
    Timer.set[i].timer = window.setTimeout("Timer.callOnce("+i+");",msec);
    return i;
}

// The clear functions should be called with
// the return value from the equivalent set function.

Timer.prototype.clearInterval = function(i){
    if(!Timer.set[i]) return;
    window.clearInterval(Timer.set[i].timer);
    Timer.set[i] = null;
}
Timer.prototype.clearTimeout = function(i){
    if(!Timer.set[i]) return;
    window.clearTimeout(Timer.set[i].timer);
    Timer.set[i] = null;
}

// Private data

Timer.set = new Array();
Timer.buildCall = function(obj, i, args){
    var t = "";
    Timer.set[i] = new Array();
    if(obj != window){
        Timer.set[i].obj = obj;
        t = "Timer.set["+i+"].obj.";
    }
    t += args[0]+"(";
    if(args.length > 2){
        Timer.set[i][0] = args[2];
        t += "Timer.set["+i+"][0]";
        for(var j=1; (j+2)<args.length; j++){
            Timer.set[i][j] = args[j+2];
            t += ", Timer.set["+i+"]["+j+"]";
    }}
    t += ");";
    Timer.set[i].call = t;
    return t;
}
Timer.callOnce = function(i){
    if(!Timer.set[i]) return;
    eval(Timer.set[i].call);
    Timer.set[i] = null;
}
Timer.getNew = function(){
    var i = 0;
    while(Timer.set[i]) i++;
    return i;
}]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/home/chcai/R/x86_64-unknown-linux-gnu-library/3.0/SVGAnnotation/SVGGUI/checkbox_and_radiobutton.js"><![CDATA[/*
Scripts to create interactive checkboxes and radio buttons in SVG using ECMA script
Copyright (C) <2007>  <Andreas Neumann>
Version 1.1.3, 2007-08-09
neumann@karto.baug.ethz.ch
http://www.carto.net/
http://www.carto.net/neumann/

Credits:
* Guy Morton for providing a fix to let users toggle checkboxes by clicking on text labels
* Bruce Rindahl for providing the bugfix described in version 1.1.2
* Simon Shutter for providing a fix for the ASV in IE crash when reloading the SVG file after calling the .remove() method on a checkbox

----

Documentation: http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/

----

current version: 1.1.3

version history:
1.0 (2006-03-13)
initial version

1.1 (2006-07-11)
text labels are now clickable (thanks to Guy Morton)
added method .moveTo() to move checkbox to a different location
introduced new constructor parameter labelYOffset to allow more flexible placement of the text label

1.1.1 (2007-02-06)
added cursor pointer to the text label and use element representing the checkBox

1.1.2 (2007-04-19)
bug fix: this.selectedIndex was not correctly initialized in method addCheckBox of the radioButtonGroup object

1.1.3 (2007-08-09)
bug fix: the method .remove() was slightly modified (using removeEventListener) for avoiding a crash related to the method after reloading the SVG file

-------


This ECMA script library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library (lesser_gpl.txt); if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

----

original document site: http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/
Please contact the author in case you want to use code or ideas commercially.
If you use this code, please include this copyright header, the included full
LGPL 2.1 text and read the terms provided in the LGPL 2.1 license
(http://www.gnu.org/copyleft/lesser.txt)

-------------------------------

Please report bugs and send improvements to neumann@karto.baug.ethz.ch
If you use this control, please link to the original (http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/)
somewhere in the source-code-comment or the "about" of your project and give credits, thanks!

*/

function checkBox(id,parentNode,x,y,checkboxId,checkcrossId,checkedStatus,labelText,textStyles,labelDistance,labelYOffset,radioButtonGroup,functionToCall) {
	var nrArguments = 13;
	var createCheckbox= true;
	if (arguments.length == nrArguments) {	
		this.id = id; //an internal id, this id is not used in the SVG Dom tree
		this.parentNode = parentNode; //the parentNode, string or nodeReference
		this.x = x; //the center of the checkBox
		this.y = y; //the center of the checkBox
		this.checkboxId = checkboxId; //the id of the checkbox symbol (background)
		this.checkcrossId = checkcrossId; //the id of the checkbox symbol (foreground), pointer-events should be set to "none"
		this.checkedStatus = checkedStatus; //a status variable (true|false), indicates if checkbox is on or off
		this.labelText = labelText; //the text of the checkbox label to be displayed, use undefined or empty string if you don't need a label text
		this.textStyles = textStyles; //an array of literals containing the text settings
		if (!this.textStyles["font-size"]) {
			this.textStyles["font-size"] = 12;
		}
		this.labelDistance = labelDistance; //a distance defined from the center of the checkbox to the left of the text of the label
		this.labelYOffset = labelYOffset; //a y offset value for the text label in relation to the checkbox symbol center
		this.radioButtonGroup = radioButtonGroup; //a reference to a radio button group, if this is a standalone checkBox, just use the parameter undefined
		this.functionToCall = functionToCall; //the function to call after triggering checkBox
		this.exists = true; //status that indicates if checkbox exists or not, is set to false after method .remove() was called
		this.label = undefined; //later a reference to the label text node
	}
	else {
		createCheckbox = false;
		alert("Error in checkbox ("+id+"): wrong nr of arguments! You have to pass over "+nrArguments+" parameters.");
	}
	if (createCheckbox) {
		//timer stuff
		this.timer = new Timer(this); //a Timer instance for calling the functionToCall
		if (this.radioButtonGroup) {
			this.timerMs = 0;
		}
		else {
			this.timerMs = 200; //a constant of this object that is used in conjunction with the timer - functionToCall is called after 200 ms
		}
		//create checkbox
		this.createCheckBox();
	}
	else {
		alert("Could not create checkbox with id '"+id+"' due to errors in the constructor parameters");		
	}
}

//this method creates all necessary checkbox geometry
checkBox.prototype.createCheckBox = function() {
	if (typeof(this.parentNode) == "string") {
		this.parentNode = document.getElementById(this.parentNode);
	}
	//create checkbox
	this.checkBox = document.createElementNS(svgNS,"use");
	this.checkBox.setAttributeNS(null,"x",this.x);
	this.checkBox.setAttributeNS(null,"y",this.y);
	this.checkBox.setAttributeNS(xlinkNS,"href","#"+this.checkboxId);
	this.checkBox.addEventListener("click",this,false);
	this.checkBox.setAttributeNS(null,"cursor","pointer");
	this.parentNode.appendChild(this.checkBox);
	//create checkcross
	this.checkCross = document.createElementNS(svgNS,"use");
	this.checkCross.setAttributeNS(null,"x",this.x);
	this.checkCross.setAttributeNS(null,"y",this.y);
	this.checkCross.setAttributeNS(xlinkNS,"href","#"+this.checkcrossId);
	this.parentNode.appendChild(this.checkCross);
	if (this.checkedStatus == false) {
		this.checkCross.setAttributeNS(null,"display","none");
	}
	//create label, if any
	if (this.labelText) {
		if (this.labelText.length > 0) {
			this.label = document.createElementNS(svgNS,"text");
			for (var attrib in this.textStyles) {
				var value = this.textStyles[attrib];
				if (attrib == "font-size") {
					value += "px";
				}
				this.label.setAttributeNS(null,attrib,value);
			}
			this.label.setAttributeNS(null,"x",(this.x + this.labelDistance));
			this.label.setAttributeNS(null,"y",(this.y + this.labelYOffset));
			this.label.setAttributeNS(null,"cursor","pointer");
			var labelTextNode = document.createTextNode(this.labelText);
			this.label.appendChild(labelTextNode);
			this.label.setAttributeNS(null,"pointer-events","all");
			this.label.addEventListener("click",this,false);
			this.parentNode.appendChild(this.label);
		}
	}
	if (this.radioButtonGroup) {
		this.radioButtonGroup.addCheckBox(this);
	}
}

checkBox.prototype.handleEvent = function(evt) {
	if (evt.type == "click") {
		if (this.checkedStatus == true) {
			this.checkCross.setAttributeNS(null,"display","none");
			this.checkedStatus = false;
		}
		else {
			this.checkCross.setAttributeNS(null,"display","inline");
			this.checkedStatus = true;
		}
	}
	this.timer.setTimeout("fireFunction",this.timerMs);
}

checkBox.prototype.fireFunction = function() {
	if (this.radioButtonGroup) {
		this.radioButtonGroup.selectById(this.id,true);
	}
	else {
		if (typeof(this.functionToCall) == "function") {
			this.functionToCall(this.id,this.checkedStatus,this.labelText);
		}
		if (typeof(this.functionToCall) == "object") {
			this.functionToCall.checkBoxChanged(this.id,this.checkedStatus,this.labelText);
		}
		if (typeof(this.functionToCall) == undefined) {
			return;
		}
	}
}

checkBox.prototype.check = function(FireFunction) {
	this.checkCross.setAttributeNS(null,"display","inherit");
	this.checkedStatus = true;
	if (FireFunction) {
		this.timer.setTimeout("fireFunction",this.timerMs);
	}
}

checkBox.prototype.uncheck = function(FireFunction) {
	this.checkCross.setAttributeNS(null,"display","none");
	this.checkedStatus = false;
	if (FireFunction) {
		this.timer.setTimeout("fireFunction",this.timerMs);
	}
}

//move checkbox to a different position
checkBox.prototype.moveTo = function(moveX,moveY) {
    this.x = moveX;
    this.y = moveY;
    //move checkbox
 	this.checkBox.setAttributeNS(null,"x",this.x);
	this.checkBox.setAttributeNS(null,"y",this.y);
    //move checkcross
	this.checkCross.setAttributeNS(null,"x",this.x);
	this.checkCross.setAttributeNS(null,"y",this.y);
    //move text label
	if (this.labelText) {
		this.label.setAttributeNS(null,"x",(this.x + this.labelDistance));
		this.label.setAttributeNS(null,"y",(this.y + this.labelYOffset));
    }
}

checkBox.prototype.remove = function(FireFunction) {
	this.checkBox.removeEventListener("click",this,false);
	this.parentNode.removeChild(this.checkBox);
	this.parentNode.removeChild(this.checkCross);
	if (this.label) {
		this.parentNode.removeChild(this.label);	
	}
	this.exists = false;
}

checkBox.prototype.setLabelText = function(labelText) {
	this.labelText = labelText
	if (this.label) {
		this.label.firstChild.nodeValue = labelText;
	}
	else {
		if (this.labelText.length > 0) {
			this.label = document.createElementNS(svgNS,"text");
			for (var attrib in this.textStyles) {
				value = this.textStyles[attrib];
				if (attrib == "font-size") {
					value += "px";
				}
				this.label.setAttributeNS(null,attrib,value);
			}
			this.label.setAttributeNS(null,"x",(this.x + this.labelDistance));
			this.label.setAttributeNS(null,"y",(this.y + this.textStyles["font-size"] * 0.3));
			var labelTextNode = document.createTextNode(this.labelText);
			this.label.appendChild(labelTextNode);
			this.parentNode.appendChild(this.label);
		}	
	}
}

/* start of the radioButtonGroup object */

function radioButtonGroup(id,functionToCall) {
	var nrArguments = 2;
	if (arguments.length == nrArguments) {	
		this.id = id;
		if (typeof(functionToCall) == "function" || typeof(functionToCall) == "object" || typeof(functionToCall) == undefined) {
			this.functionToCall = functionToCall;
		}
		else {
			alert("Error in radiobutton with ("+id+"): argument functionToCall is not of type 'function', 'object' or undefined!");		
		}
		this.checkBoxes = new Array(); //this array will hold checkbox objects
		this.selectedId = undefined; //holds the id of the active radio button
		this.selectedIndex = undefined; //holds the index of the active radio button
		//timer stuff
		this.timer = new Timer(this); //a Timer instance for calling the functionToCall
		this.timerMs = 200; //a constant of this object that is used in conjunction with the timer - functionToCall is called after 200 ms
	}
	else {
		alert("Error in radiobutton with ("+id+"): wrong nr of arguments! You have to pass over "+nrArguments+" parameters.");
	}
}

radioButtonGroup.prototype.addCheckBox = function(checkBoxObj) {
	this.checkBoxes.push(checkBoxObj);
	if (checkBoxObj.checkedStatus) {
		this.selectedId = checkBoxObj.id;
		this.selectedIndex = this.checkBoxes.length - 1;
	}
}

//change radio button selection by id
radioButtonGroup.prototype.selectById = function(cbId,fireFunction) {
	var found = false;
	for (var i=0;i<this.checkBoxes.length;i++) {
		if (this.checkBoxes[i].id == cbId) {
			this.selectedId = cbId;
			this.selectedIndex = i;
			if (this.checkBoxes[i].checkedStatus == false) {
				this.checkBoxes[i].check(false);
			}
			found = true;
		}
		else {
			this.checkBoxes[i].uncheck(false);
		}
	}
	if (found) {
		if (fireFunction) {
			this.timer.setTimeout("fireFunction",this.timerMs);
		}
	}
	else {
		alert("Error in radiobutton with ("+this.id+"): could not find checkbox with id '"+cbId+"'");	
	}
}

//change radio button selection by label name
radioButtonGroup.prototype.selectByLabelname = function(labelName,fireFunction) {
	var id = -1;
	for (var i=0;i<this.checkBoxes.length;i++) {
		if (this.checkBoxes[i].labelText == labelName) {
			id = this.checkBoxes[i].id;
		}
	}
	if (id == -1) {
		alert("Error in radiobutton with ("+this.id+"): could not find checkbox with label '"+labelName+"'");
	}
	else {
		this.selectById(id,fireFunction);	
	}
}

radioButtonGroup.prototype.fireFunction = function() {
	if (typeof(this.functionToCall) == "function") {
		this.functionToCall(this.id,this.selectedId,this.checkBoxes[this.selectedIndex].labelText);
	}
	if (typeof(this.functionToCall) == "object") {
		this.functionToCall.radioButtonChanged(this.id,this.selectedId,this.checkBoxes[this.selectedIndex].labelText);
	}
	if (typeof(this.functionToCall) == undefined) {
		return;
	}
}]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/home/chcai/R/x86_64-unknown-linux-gnu-library/3.0/SVGAnnotation/SVGGUI/hideSVGElements.js"><![CDATA[var checkBoxes = new Array();
var radioGroupBandwidth;
var numPanels = 0;

function createRadioBoxList(count, x, labels, toggleCB, prefix, npanel) {
	
		//labeltext styles
    var labeltextStyles = {"font-family":"Arial,Helvetica","fill":"dimgray","font-size":15};
		//variables for label placement
    var labelDistance = 12;
    var labelYOffset = 5.5;

    var y = 50; 
    var i;

    numPanels = npanel;

    for(i = 1; i <= count; i++) {
          checkBoxes[i] = new checkBox(prefix + i, "checkboxes", x, y + (i-1) * 18, "checkBoxRect", "checkBoxCross", true, 
                                       labels[i-1], labeltextStyles,labelDistance,labelYOffset,undefined, toggleCB);

    }
}

function toggle(id, status, label) {
    var onOrOff = "hidden";

    if (status) {
	onOrOff = "visible";
    }
    document.getElementById(id).setAttribute('visibility', onOrOff);
}


function togglePanel(id, status, label) {
    var onOrOff = "hidden";
    var p;

    if (status) {
	onOrOff = "visible";
    }

    for( p = 1; p <= numPanels; p++) {
       pid = "panel-" + p + "-" + id;
       document.getElementById(pid).setAttribute('visibility', onOrOff);
    }
}]]></script></svg>
